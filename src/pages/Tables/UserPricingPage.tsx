import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import PageMeta from "../../components/common/PageMeta";
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";

interface PricingItem {
    id?: number;
    actionCode: string;
    actionName: string;
    tokenCost: number;
    creditCost: number;
    vndCost: number;
}

export default function UserPricingPage() {
    const API_URL = import.meta.env.VITE_API_URL || "";

    const [pricingList, setPricingList] = useState<PricingItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [newItem, setNewItem] = useState<PricingItem>({
        actionCode: "",
        actionName: "",
        tokenCost: 0,
        creditCost: 0,
        vndCost: 0,
    });

    // ----------------------
    // üî∏ L·∫•y danh s√°ch Pricing
    // ----------------------
    const fetchPricing = async () => {
        try {
            const res = await fetch(`${API_URL}/pricing`);
            if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu");
            const data = await res.json();
            setPricingList(data);
        } catch (err) {
            console.error(err);
            Swal.fire("L·ªói", "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu!", "error");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchPricing();
    }, []);

    // ----------------------
    // üî∏ Th√™m m·ªõi Pricing
    // ----------------------
    const handleAdd = async () => {
        if (!newItem.actionName || !newItem.actionCode) {
            Swal.fire("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n v√† m√£ thao t√°c", "warning");
            return;
        }

        try {
            const res = await fetch(`${API_URL}/pricing`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(newItem),
            });

            if (!res.ok) throw new Error("Th√™m m·ªõi th·∫•t b·∫°i");
            Swal.fire("Th√†nh c√¥ng", "ƒê√£ th√™m b·∫£ng gi√° m·ªõi!", "success");
            setNewItem({
                actionCode: "",
                actionName: "",
                tokenCost: 0,
                creditCost: 0,
                vndCost: 0,
            });
            fetchPricing();
        } catch (err) {
            console.error(err);
            Swal.fire("L·ªói", "Kh√¥ng th·ªÉ th√™m m·ªõi!", "error");
        }
    };

    // ----------------------
    // üî∏ X√≥a Pricing
    // ----------------------
    const handleDelete = async (id?: number) => {
        if (!id) return;
        const confirm = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?",
            text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "X√≥a",
            cancelButtonText: "H·ªßy",
        });

        if (!confirm.isConfirmed) return;

        try {
            const res = await fetch(`${API_URL}/pricing/${id}`, { method: "DELETE" });
            if (!res.ok) throw new Error("X√≥a th·∫•t b·∫°i");
            Swal.fire("ƒê√£ x√≥a!", "M·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.", "success");
            setPricingList((prev) => prev.filter((p) => p.id !== id));
        } catch (err) {
            console.error(err);
            Swal.fire("L·ªói", "Kh√¥ng th·ªÉ x√≥a m·ª•c n√†y!", "error");
        }
    };

    if (loading) return <p className="text-center py-10">ƒêang t·∫£i...</p>;

    // ----------------------
    // üî∏ Giao di·ªán
    // ----------------------
    return (
        <>
            <PageMeta title="B·∫£ng gi√° thao t√°c" description="Xem v√† qu·∫£n l√Ω b·∫£ng gi√° AI" />
            <PageBreadcrumb pageTitle="B·∫£ng gi√° thao t√°c" />

            <ComponentCard title="Danh s√°ch b·∫£ng gi√°">
                <div className="overflow-x-auto">
                    <table className="min-w-full border rounded-lg">
                        <thead className="bg-gray-100">
                            <tr>
                                <th className="px-4 py-2 text-left">M√£ thao t√°c</th>
                                <th className="px-4 py-2 text-left">T√™n thao t√°c</th>
                                <th className="px-4 py-2 text-left">Token cost</th>
                                <th className="px-4 py-2 text-left">Credit cost</th>
                                <th className="px-4 py-2 text-left">VNƒê cost</th>
                                <th className="px-4 py-2 text-left">H√†nh ƒë·ªông</th>
                            </tr>
                        </thead>
                        <tbody>
                            {pricingList.map((p) => (
                                <tr key={p.id} className="border-t hover:bg-gray-50">
                                    <td className="px-4 py-2">{p.actionCode}</td>
                                    <td className="px-4 py-2">{p.actionName}</td>
                                    <td className="px-4 py-2">{p.tokenCost}</td>
                                    <td className="px-4 py-2">{p.creditCost}</td>
                                    <td className="px-4 py-2">{p.vndCost.toLocaleString("vi-VN")}</td>
                                    <td className="px-4 py-2">
                                        <button
                                            onClick={() => handleDelete(p.id)}
                                            className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                                        >
                                            X√≥a
                                        </button>
                                    </td>
                                </tr>
                            ))}

                            {/* Form th√™m m·ªõi */}
                            <tr className="border-t bg-gray-50">
                                <td className="px-4 py-2">
                                    <input
                                        type="text"
                                        value={newItem.actionCode}
                                        onChange={(e) => setNewItem({ ...newItem, actionCode: e.target.value })}
                                        className="w-full border rounded px-2 py-1"
                                        placeholder="VD: IMAGE_GEN"
                                    />
                                </td>
                                <td className="px-4 py-2">
                                    <input
                                        type="text"
                                        value={newItem.actionName}
                                        onChange={(e) => setNewItem({ ...newItem, actionName: e.target.value })}
                                        className="w-full border rounded px-2 py-1"
                                        placeholder="VD: T·∫°o h√¨nh ·∫£nh"
                                    />
                                </td>
                                <td className="px-4 py-2">
                                    <input
                                        type="number"
                                        value={newItem.tokenCost}
                                        onChange={(e) =>
                                            setNewItem({ ...newItem, tokenCost: Number(e.target.value) })
                                        }
                                        className="w-24 border rounded px-2 py-1"
                                    />
                                </td>
                                <td className="px-4 py-2">
                                    <input
                                        type="number"
                                        value={newItem.creditCost}
                                        onChange={(e) =>
                                            setNewItem({ ...newItem, creditCost: Number(e.target.value) })
                                        }
                                        className="w-24 border rounded px-2 py-1"
                                    />
                                </td>
                                <td className="px-4 py-2">
                                    <input
                                        type="number"
                                        value={newItem.vndCost}
                                        onChange={(e) =>
                                            setNewItem({ ...newItem, vndCost: Number(e.target.value) })
                                        }
                                        className="w-32 border rounded px-2 py-1"
                                    />
                                </td>
                                <td className="px-4 py-2 text-center">
                                    <button
                                        onClick={handleAdd}
                                        className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                                    >
                                        Th√™m
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </ComponentCard>
        </>
    );
}
